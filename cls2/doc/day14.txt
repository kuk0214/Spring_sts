# day14

Log4j Pattern

%p		:	레벨을 표시해준다.
			info, warn, error, fatal 등의 priority 를 출력	
			참고 ]
					%-5p	: 레벨을 5글자로 왼쪽정렬해서 출력
								남는 공간은 공백으로 채운다.
					%5p		: 레벨을 5글자로 오른쪽정렬해서 출력
%m		:	로그내용을 출력
%d		:	로깅이벤트가 발생한 시간을 출력
			포맷
				%d{yyyy/MM/dd, SSS}
			의 형식을 사용하고 SimpleDateFormat에 따른 포맷을 사용한다.
%t		:	로그이벤트가 발생된 쓰레드의 이름을 출력
%%		:	% 를 출력
			참고 ]
				log4j 에서는 이스케이프 문자를 % 기호로 사용한다.
%n		:	줄바꿈
%c		:	카테고리를 출력
%C		:	클래스이름을 출력
%F		: 	로깅이 발생한 프로그램 파일명을 출력
%I		:	로깅이 발생한 caller의 정보를 출력
%L		:	로깅이 발생한 caller의 라인수를 출력
%M		:	로깅이 발생한 method 이름을 출력
%r		:	어플리케이션 시작 이후 로깅이 발생한 시점까지의 시간을 출력

------------------------------------------------------------------------------------------

Interceptor
==> 간단히 말해서 클라이언트의 요청을 가로채서 먼저 처리해야 할 것들을 처리하는 기능
	예 ]
		-- 설문조사의 경우는 모든 기능에서 로그인 검사가 이루어져야 한다.
			이때 모든 함수에서 이 기능을 코드를 작성하면
			중복된 코드가 많아지고, 코드의 길이도 길어지고,
			서버가 읽어야할 내용도 많아진다.
			
			이때 요청을 가로채는 기능에서 로그인 검사를하고
			로그인이 되어있으면 클라이언트가 요청했던 요청 내용을 실행하고
			로그인이 되어있지 않으면 로그인 페이지로 보내는 기능을
			구현할 수 있는 것이 인터셉터이다.

--------------------------------------------------------------------------------------------

AOP(Aspect Oriented Programming)	-	관심사 지향 프로그래밍
--> 횡단관심사를 처리하는 프로그램 기법

	loginProc					joinProc		|
		|							|			|
	로그인여부					로그인여부		|
		|							|			|
	데이터무결성				데이터무결성	|
		|							|			V
	데이터베이스결과			입력처리결과	종단

	-----------------------------------------> 횡단
	
용어 설명 ]
	Aspect		: 관심사를 모듈화 한 것 주로 부가기능을 모듈화
	Target		: Aspect 를 적용하는 곳(클래스 또는 함수...)
	Advice		: 실제 처리해야할 것 또는 실질적 부가기능을 구현해놓은 것
	JoinPoint	: Advice가 적용될 위치
	PointCut	: JoinPoint의 상세한 스펙을 정의한 객체
	
참고 ]
	스프링 AOP 특징
		프록시 패턴 기반의 AOP 구현체
		---> 프록시(Proxy) 객체를 사용하는 이유는 접근 제어와 부가기능을 추가하기 위해서
		Bean에만 AOP를 적용가능하다.
		
참고 ]
	특정클래스를 bean 처리를 할 때 이제까지는 xml 파일에서 빈을 등록하는 방법만 사용했다.
	하지만 스프링에서는 어노테이션을 이용해서도 빈처리가 가능하다.
	이때 빈을 등록할 때 해당 빈의 아이디값은
		클래스이름을 사용해서 자동으로 만들어준다.(클래스이름을 소문자로 변환해서 아이디를 만든다.)
	
	서비스 기능의 클래스에서는 주로
	@Service
	어노테이션을 사용해서 빈처리를 하는 방법이 많이 사용되어진다.

구현 예제 ]
	로그인 처리시 해당회원이 로그인한 시간을 로그로 남겨보자.
	
=====================================================================================================

Project 요구사항

제출 문서
	1. 기획안
	2. 데이터베이스 설계 문서(테이블명세서, ERD)
	3. 스토리보드
	4. 요청설계
	5. 발표용 PPT
	6. 소스코드(zip 파일로 압축해서 제출)
	
1. springframework 4.3.18
2. OracleDB 11g xe
3. MyBatis
4. Maven
5. MVC Model2 방식으로 구현
6. 동적질의 1개 이상 포함되어야 한다.
7. logging, interceptor, AOP 중 한개는 반드시 구현해야 한다.

================================================================================================

UML
	==> Unified Modeling Language 의 약자로
		표준화된 범용 모델링 언어의 하나
		
		즉, 우리가 만들 프로그램을 도식적(그림)으로 표현해서 
		좀 더 빨리 전체 흐름을 이해할 수 있도록 도와주는 것
		
	종류 ]
		
		1. Usecase Diagram
			==> 사용자의 입장에서 필요한 기능을 도식으로 표현한 것
				
				그리는 방법 ]
					
					1. 엑터
						==> 해당 프로그램을 사용하는 사용자를 도식적으로 만든것.
							프로그램을 사용하는 사용자의 종류는 될 수 있으면 정확하게 세분화해서 표현하는 것이 좋다.
							
							결론적으로 
								엑터를 보면 만들어야 하는 프로그램의 권한이나,
								프로그램의 종류를 분석할 수 있어야 한다.
								
					2. 유즈케이스
						==> 사용할 수 있는 기능을 도식적으로 표현한 것.
							될 수 있으면 자세하게 기능을 풀어서 표현하는 것이 좋다.
							
					-- 각 기능의 연결관계를 표시하는 도구
					3. 일반화 작업
						==> 순차적으로 처리하는 것
						
						예 ]
							게시판의 경우 목록보기와 상세보기는
							목록보기의 다음 순서로 상세보기가 진행된다.					
					4. include 작업
						==> 특정 작업을 실행할 때 반드시 포함되어야 할 작업을 표시하는 것
						
						예 ]
							회원가입의 경우 반드시 아이디 중복 검사를 거쳐야 하는 경우에
							아이디 중복 검사 기능은 회원가입에 include 기능으로 만든다
							
						주의 ]
							화살표의 방향은 메인기능에서 보조기능으로 나가는 방향으로 작성해야 한다.
							
					5. extends 작업
						==> 특정 작업이 진행되는 도중에 다른작업이 선택적으로 확장되어짐을 표현하는 것.
						
						주의 ]
							화살표의 방향은 선택기능에서 메인기능으로 화살표가 표현되어야 한다. 
							
			참고 ]
				UseCase는 도식적으로 사용자가 사용할 수 있는 기능에 대해서 나열한 것이다.
				이것만 가지고는 개발자 입장에서 어떻게 만들어야 하는지 구체적인 목적을 알 수 없다.
				
				예 ]
					로그인 기능은 언제 어떻게 실행해야 하며
					id, pw는 어떤 정규식표현식 검사를 거쳐야 하는지...
					로그인 성공 / 실패의 경우 어떻게 처리해야 하는지
					에 대해서는 구체적으로 알 수 없다.
					
				따라서
					UseCase는 반드시 UseCase 명세서를 같이 만들어 줘야 한다.
					
		UseCase 명세서 만드는 방법
		==> 하나의 외부문서로 아무방식으로 만들어도 상관없다.
			( 특정한 포맷이 있거나 사용해야되는 프로그램이 있는 것이 아니다. )
			대신 다음 내용이 포함되도록 권장하고 있다.
			그리고 회사마다 양식은 모두 다르다.
			
			1. 유즈케이스 제목
				==> 현재 유즈케이스의 제목을 의미
					==> 전체 유즈케이스가 아닌 하나의 유즈케이스
					
			2. 개요
				==> 유즈케이스의 전체적인 기능 설명을 의미한다.
				
			3. 관련액터
				==> 해당 유즈케이스를 사용하는 사용자 종류(엑터의 종류)를 의미
				
			4. 기본흐름
				==> 가장 기본적인 작업의 흐름을 명시하는 것
			
			5. 대체흐름
				==> 기본흐름에 문제가 생긴경우 보조적으로 처리할 작업의 흐름을 명시하는 것
					(정상적으로 작업하기 위한 보조흐름)
			
			6. 예외흐름
				==> 기본흐름에 문제가 생긴 경우 보조적으로 처리할 작업의 흐름을 명시하는 것
					(정상적인 작업이 진행되지 못할 경우 처리할 보조흐름)
			
			7. 확장점
				==> 해당 기능을 수행하지 못할 경우 대비해서 대신 처리할 기능을 나열해 주는 것
				
			8. 특이 사항
				==> 특이사항이 필요한 경우 설명하는 것.
		
		
		2. Class Diagram	- 프로젝트에 제작할 클래스들을 도식화해서 표현
		3. Sequence Diagram	- 요청이나 데이터의 흐름을 도식화해서 표현
		4. Collaboration Diagram
		5. StateChart Diagram
		6. Activity Diagram
		7. Deployment Diagram
		8. Component Diagram